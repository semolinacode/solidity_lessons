// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract Demo {
    // переменные, объявляемые в контракте называются "переменные состояния" или "state variable"
    // значение такой переменной будет сохранено в блокчейн
    // значение по умолчанию у булевых переменных = False
    bool public myBool;
    uint public minimum;
    uint public maximum;
    uint public testOverflow = 255;

    // в солидити все переменные должны иметь значение (не бывает undefined, null, ...)
    // все переменные имеют значение по умолчанию при объявлении

    // типы данных из урока:
    // bool, uint, int

    // uint имеет размерность
    // размерность можно указать при создании переменной (на самом деле она всегда указывается uint = uint256)
    // минимальная размерность uint8
    // размерность варьируется от 8 до 256 с шагом 8

    // математические операции: +, -, *, /, %, **, унарный минус
    // деление 2-х целых чисел дас в результате целое число (округление производится путем отбрасывания дробной части)

    // операторы сравнения: >, <, ==, !=, >=, <=

    // логические операции как в плюсах: &&, ||, ==, !=, !

    // a = a + 1 можно заменить:
    // a += 1
    // a++ (декремент тоже есть)

    // если переменная дошла до своего верхнего предела (например uint8 дошел до 255) 
    // и мы делаем +1, то вылетаем с ошибкой и транзакция будет откачена, деньги возвращаются на счет (если они посылались в функцию)

    function inc() {
        // будет ошибка так как testOverflow = 255
        // testOverflow++;

        // можно использовать блок unchecker, который будет отлавливать ошибки переполнения
        // он не вернет ошибку, а начнет сначала (в битах будут все нули)
        unchecker {
            testOverflow++;
        }
    }

    // как функция принимает аргументы
    // function myFunc(bool _inputBool) public  {
    //     bool localBool = false;
    // }

    function demo() public {
        // посмотреть крайние значения переменных

        minimum = type(uint8).min;
        maximum = type(uint8).max;
    }
}
